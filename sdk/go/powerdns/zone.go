// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package powerdns

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"internal"
)

type Zone struct {
	pulumi.CustomResourceState

	Account     pulumi.StringPtrOutput   `pulumi:"account"`
	Kind        pulumi.StringOutput      `pulumi:"kind"`
	Masters     pulumi.StringArrayOutput `pulumi:"masters"`
	Name        pulumi.StringOutput      `pulumi:"name"`
	Nameservers pulumi.StringArrayOutput `pulumi:"nameservers"`
	Result      pulumi.StringOutput      `pulumi:"result"`
	SoaEditAPI  pulumi.StringPtrOutput   `pulumi:"soaEditAPI"`
	ZoneId      pulumi.StringOutput      `pulumi:"zoneId"`
}

// NewZone registers a new resource with the given unique name, arguments, and options.
func NewZone(ctx *pulumi.Context,
	name string, args *ZoneArgs, opts ...pulumi.ResourceOption) (*Zone, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Kind == nil {
		return nil, errors.New("invalid value for required argument 'Kind'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Zone
	err := ctx.RegisterResource("powerdns:index:Zone", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZone gets an existing Zone resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZone(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZoneState, opts ...pulumi.ResourceOption) (*Zone, error) {
	var resource Zone
	err := ctx.ReadResource("powerdns:index:Zone", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Zone resources.
type zoneState struct {
}

type ZoneState struct {
}

func (ZoneState) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneState)(nil)).Elem()
}

type zoneArgs struct {
	Account     *string  `pulumi:"account"`
	Kind        string   `pulumi:"kind"`
	Masters     []string `pulumi:"masters"`
	Name        string   `pulumi:"name"`
	Nameservers []string `pulumi:"nameservers"`
	SoaEditAPI  *string  `pulumi:"soaEditAPI"`
}

// The set of arguments for constructing a Zone resource.
type ZoneArgs struct {
	Account     pulumi.StringPtrInput
	Kind        pulumi.StringInput
	Masters     pulumi.StringArrayInput
	Name        pulumi.StringInput
	Nameservers pulumi.StringArrayInput
	SoaEditAPI  pulumi.StringPtrInput
}

func (ZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneArgs)(nil)).Elem()
}

type ZoneInput interface {
	pulumi.Input

	ToZoneOutput() ZoneOutput
	ToZoneOutputWithContext(ctx context.Context) ZoneOutput
}

func (*Zone) ElementType() reflect.Type {
	return reflect.TypeOf((**Zone)(nil)).Elem()
}

func (i *Zone) ToZoneOutput() ZoneOutput {
	return i.ToZoneOutputWithContext(context.Background())
}

func (i *Zone) ToZoneOutputWithContext(ctx context.Context) ZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneOutput)
}

func (i *Zone) ToOutput(ctx context.Context) pulumix.Output[*Zone] {
	return pulumix.Output[*Zone]{
		OutputState: i.ToZoneOutputWithContext(ctx).OutputState,
	}
}

type ZoneOutput struct{ *pulumi.OutputState }

func (ZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Zone)(nil)).Elem()
}

func (o ZoneOutput) ToZoneOutput() ZoneOutput {
	return o
}

func (o ZoneOutput) ToZoneOutputWithContext(ctx context.Context) ZoneOutput {
	return o
}

func (o ZoneOutput) ToOutput(ctx context.Context) pulumix.Output[*Zone] {
	return pulumix.Output[*Zone]{
		OutputState: o.OutputState,
	}
}

func (o ZoneOutput) Account() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringPtrOutput { return v.Account }).(pulumi.StringPtrOutput)
}

func (o ZoneOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

func (o ZoneOutput) Masters() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringArrayOutput { return v.Masters }).(pulumi.StringArrayOutput)
}

func (o ZoneOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ZoneOutput) Nameservers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringArrayOutput { return v.Nameservers }).(pulumi.StringArrayOutput)
}

func (o ZoneOutput) Result() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.Result }).(pulumi.StringOutput)
}

func (o ZoneOutput) SoaEditAPI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringPtrOutput { return v.SoaEditAPI }).(pulumi.StringPtrOutput)
}

func (o ZoneOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneInput)(nil)).Elem(), &Zone{})
	pulumi.RegisterOutputType(ZoneOutput{})
}
